all_results <- purrr::map2(seq_len(locations), exp_name, get_design)
fieldbook_all <- dplyr::bind_rows(purrr::map(all_results, "fieldbook"))
fieldmaps_all <- purrr::map(all_results, "fieldmap")
return(list(fieldbook = fieldbook_all, fieldmap = fieldmaps_all))
}
protocolo1 <-
full_factorial2(
factors = c("PROD", "MP", "CONC"),
nlevels = c(2, 2, 2),
levels = c("SBZ", "SZ", "MONO", "HEPTA", "Z1", "Z2"),
# add_trats = c("CONT", "ZINTRAC"),
reps = 4,
design = "CRD",
seed = 5,
serpentine = TRUE,
fill_color = TRUE,
layout = "custom",
layout_allocation = c(2, 5), # linhas x colunas
exp_name = c("Protocolo C", "Protocolo B"),
locations = 2
)
View(protocolo1)
View(protocolo1[["fieldbook"]])
split_plot2 <- function(wholeplot,
subplot,
reps = 4,
design = c("CRD", "RCBD"),
seed = 123,
serpentine = TRUE,
exp_name = "Experiment",
fill_color = TRUE,
text_size = 3,
locations = 1) {
cli::cli_h1("Iniciando experimento em parcelas subdivididas")
design <- match.arg(design)
if (length(exp_name) == 1) {
exp_name <- rep(exp_name, locations)
} else if (length(exp_name) != locations) {
cli::cli_abort("O argumento {.arg exp_name} deve ter comprimento 1 ou igual ao número de localidades.")
}
if (!is.numeric(reps) || length(reps) != 1 || reps < 1) {
cli::cli_abort("O argumento {.arg reps} deve ser um número inteiro positivo.")
}
if (!is.logical(serpentine)) {
cli::cli_abort("O argumento {.arg serpentine} deve ser TRUE ou FALSE.")
}
if (!is.logical(fill_color)) {
cli::cli_abort("O argumento {.arg fill_color} deve ser TRUE ou FALSE.")
}
if (!is.numeric(text_size) || text_size <= 0) {
cli::cli_abort("O argumento {.arg text_size} deve ser um número positivo.")
}
get_design <- function(loc, loc_name) {
ntrats <- length(subplot) * length(wholeplot)
sp <- subplot
wp <- wholeplot
if (length(wp) > length(sp)) {
sp <- c(sp, rep(NA, length(wp) - length(sp)))
} else if (length(wp) < length(sp)) {
wp <- c(wp, rep(NA, length(sp) - length(wp)))
}
datasp <- data.frame(WHOLE_PLOT = wp, SUB_PLOT = sp)
expdes <- switch(design, CRD = 1, RCBD = 2)
cli::cli_alert_info("Criando delineamento split-plot para {.val {loc_name}}...")
fullFact2 <- FielDHub::split_plot(
reps = reps,
type = expdes,
seed = seed + loc,
data = datasp,
locationNames = loc_name
)
fieldbook <- fullFact2$fieldBook |>
dplyr::mutate(REP = as.integer(as.character(REP)))
REPVAL <- if (design == "CRD") rep(seq_len(reps), each = ntrats) else fieldbook$REP
fieldbook <- fieldbook |>
dplyr::mutate(
UNIQUE_ID = uuid::UUIDgenerate(n = nrow(fieldbook)),
ROW = as.numeric(REPVAL),
COL = rep(seq_len(nrow(fieldbook) / reps), reps),
LOCATION = loc_name,
.before = 1
)
if (serpentine) {
cli::cli_alert_info("Aplicando layout serpentina...")
fieldbook <- fieldbook |>
dplyr::group_by(LOCATION, ROW) |>
dplyr::arrange(ifelse(ROW %% 2 == 0, dplyr::desc(COL), COL), .by_group = TRUE) |>
dplyr::ungroup()
}
row_max <- max(fieldbook$ROW)
block_sep <- seq(1.5, row_max - 0.5, by = 1)
cli::cli_alert_info("Gerando mapa do campo para {.val {loc_name}}...")
p <- ggplot2::ggplot(fieldbook, aes(COL, ROW)) +
{if(fill_color) ggplot2::geom_tile(aes(fill = WHOLE_PLOT), color = "black")
else ggplot2::geom_tile(fill = "gray", color = "black")} +
ggplot2::geom_text(aes(label = paste0(WHOLE_PLOT, "\n", SUB_PLOT)), size = text_size) +
ggplot2::geom_hline(yintercept = block_sep, linewidth = 1.2, color = "black") +
ggplot2::scale_x_continuous(expand = ggplot2::expansion(0), breaks = 1:max(fieldbook$COL),
position = "top") +
ggplot2::scale_y_reverse(expand = ggplot2::expansion(0), breaks = 1:reps) +
ggplot2::labs(title = loc_name, x = "Coluna", y = "Linha") +
ggplot2::theme_minimal()
cli::cli_alert_success("Delineamento de {.val {loc_name}} gerado com sucesso.")
list(fieldbook = fieldbook, fieldmap = p)
}
# Gera resultados para cada localidade
all_results <- purrr::map2(seq_len(locations), exp_name, get_design)
fieldbook_all <- dplyr::bind_rows(purrr::map(all_results, "fieldbook"))
fieldmaps_all <- purrr::map(all_results, "fieldmap")
cli::cli_h2("Experimento concluído com sucesso.")
return(list(fieldbook = fieldbook_all, fieldmap = fieldmaps_all))
}
A <-
split_plot2(
subplot = c("PROD", "MP", "CONC"),
wholeplot = c("CONT", "ZINTRAC"),
reps = 3,
design = "CRD",
seed = 30,
serpentine = TRUE,
locations = 2,
exp_name = c("A", "B")
)
View(protocolo1)
protocolo1[["fieldmap"]][[1]]
protocolo1[["fieldmap"]][[2]]
source("funcoes_planejamento.R")
source("funcoes_planejamento.R")
View(full_factorial)
version
version
install.packages("installr")
installr::installr()
library(tidyverse)
library(FielDHub)
library(qrlabelr)
library(uuid)
library(cli)
source("funcoes_planejamento.R")
View(unifatorial)
View(unifatorial)
trats <- c("OLIVIA", "SOREX", "NEPEM", "HERMES")
View(unifatorial)
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCD")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "CRD")
croqui_uni <-
unifatorial(trats = trats,
reps = 3)
View(unifatorial)
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "CRD",
exp_name = "Grande teste")
View(croqui_uni)
View(croqui_uni)
croqui_uni$fieldmap
croqui_uni[["fieldmap"]]
croqui_uni
View(croqui_uni[["fieldbook"]])
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "CRD",
serpentine = FALSE,
exp_name = "Grande teste")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "CRD",
serpentine = FALSE,
exp_name = "Grande teste")
View(croqui_uni)
View(croqui_uni[["fieldbook"]])
croqui_uni$fieldmap
View(croqui_uni[["fieldbook"]])
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
exp_name = "Grande teste")
croqui_uni$fieldmap
View(croqui_uni)
View(croqui_uni[["fieldbook"]])
trats <- c("OLIVIA", "SOREX", "NEPEM", "HERMES", "T1", "T2")
View(unifatorial)
source("funcoes_planejamento.R")
trats <- c("OLIVIA", "SOREX", "NEPEM", "HERMES", "T1", "T2")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
exp_name = "Grande teste")
croqui_uni$fieldmap
View(croqui_uni[["fieldbook"]])
View(unifatorial)
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
seed = 3,
exp_name = "Grande teste")
croqui_uni$fieldmap
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
exp_name = "Grande teste")
View(croqui_uni)
View(croqui_uni[["fieldbook"]])
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
exp_name = "Grande teste")
croqui_uni$fieldmap
View(croqui_uni)
View(unifatorial)
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
croqui_uni$fieldmap
trats <- c("OLIVIA", "SOREX", "NEPEM", "HERMES", "T1", "T2")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(3, 2),
exp_name = "Grande teste")
croqui_uni$fieldmap
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(6, 1),
exp_name = "Grande teste")
croqui_uni$fieldmap
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(4, 2),
exp_name = "Grande teste")
croqui_uni$fieldmap
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(2, 2),
exp_name = "Grande teste")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
croqui_uni$fieldmap
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "CRD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
croqui_uni$fieldmap
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
croqui_uni$fieldmap
getwd()
croqui_uni$fieldmap
ggsave("croqui_exp.pdf",
width = 10,
height = 6)
ggsave("croqui_exp.pdf",
width = 7,
height = 4)
View(croqui_uni)
View(croqui_uni[["fieldbook"]])
library(rio)
croqui_uni$fieldbook
export(croqui_uni$fieldbook, "caderno_campo_uni.xlsx")
export(croqui_uni$fieldbook, "caderno_campo_uni.csv")
export(croqui_uni$fieldbook, "caderno_campo_uni.parquet")
source("~/.active-rstudio-document", echo = TRUE)
# Chunk 1
library(tidyverse)
library(FielDHub)
library(qrlabelr)
library(uuid)
library(cli)
library(rio)
# Chunk 2
source("funcoes_planejamento.R")
# Chunk 3
trats <- c("OLIVIA", "SOREX", "NEPEM", "HERMES", "T1", "T2")
croqui_uni <-
unifatorial(trats = trats,
reps = 3,
design = "RCBD",
layout = "custom",
layout_allocation = c(2, 3),
exp_name = "Grande teste")
export(croqui_uni$fieldbook, "caderno_campo_uni.csv")
# Chunk 4
croqui_uni$fieldmap
ggsave("croqui_exp.pdf",
width = 7,
height = 4)
croqui_uni$fieldbook
as.data.frame(croqui_uni$fieldbook)
qrlabelr::gp_label(dat = as.data.frame(croqui_uni$fieldbook),
# Top left 1
top_left_txt1 = 'Gen:',
top_left_id1 = 'TREATMENT',
# Top left 2
top_left_txt2 = 'Linha:',
top_left_id2 = 'ROW',
# Top right 1
# top_right_txt1 = 'Rep:',
# top_right_id1 = 'REP',
# Top right 2
top_right_txt2 = 'Col:',
top_right_id2 = 'COL',
# Bottom left 1
bottom_left_txt1 = "UUID:",
bottom_left_id1 = "UNIQUE_ID",
# Bottom left 2
bottom_left_txt2 = "Ensaio:",
bottom_left_id2 = "LOCATION",
# Center 1
center_right_txt1 = "Bloco:",
center_right_id1 = "REP",
# Center 2
# center_right_txt2 = "Protocolo:",
# center_right_id2 = "LOCATION",
# Center 3
# center_right_txt3 = "Col",
# center_right_id3 = "COLUMN",
filename = "test.pdf",
# Page size
page_wdt = 8.27,
page_hgt = 11.72,
top_mar = 0,
bot_mar = 0,
left_mar = 0.25,
right_mar = 0.25,
# Layout
numrow = 9,
numcol = 3,
font_sz = 10,
rname = "Olivoto",
get_unique_id = "custom",
unique_id =  "UNIQUE_ID",
family = "sans")
croqui_uni$fieldmap
qrlabelr::gp_label(dat = as.data.frame(croqui_uni$fieldbook),
# Top left 1
top_left_txt1 = 'Gen:',
top_left_id1 = 'TREATMENT',
# Top left 2
top_left_txt2 = 'Linha:',
top_left_id2 = 'ROW',
# Top right 1
# top_right_txt1 = 'Rep:',
# top_right_id1 = 'REP',
# Top right 2
top_right_txt2 = 'Col:',
top_right_id2 = 'col',
# Bottom left 1
bottom_left_txt1 = "UUID:",
bottom_left_id1 = "UNIQUE_ID",
# Bottom left 2
bottom_left_txt2 = "Ensaio:",
bottom_left_id2 = "LOCATION",
# Center 1
center_right_txt1 = "Bloco:",
center_right_id1 = "REP",
# Center 2
# center_right_txt2 = "Protocolo:",
# center_right_id2 = "LOCATION",
# Center 3
# center_right_txt3 = "Col",
# center_right_id3 = "COLUMN",
filename = "test.pdf",
# Page size
page_wdt = 8.27,
page_hgt = 11.72,
top_mar = 0,
bot_mar = 0,
left_mar = 0.25,
right_mar = 0.25,
# Layout
numrow = 9,
numcol = 3,
font_sz = 10,
rname = "Olivoto",
get_unique_id = "custom",
unique_id =  "UNIQUE_ID",
family = "sans")
paste0("P", 1:5)
paste0("P", 1:5, collapse = ",")
View(croqui_uni)
croqui_uni[[1]]
croqui_uni[[2]]
paste0("P", 1:5)
paste0("P", 1:5, collapse = ",")
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ","))
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ","))
View(croqui_planta)
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_longer_delim(cols = PLANTA, delim = ",")
View(croqui_planta)
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_wider_delim(cols = PLANTA, delim = ",")
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ","))
View(croqui_planta)
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_longer_delim(cols = PLANTA, delim = ",")
View(croqui_uni)
View(croqui_planta)
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_longer_delim(cols = PLANTA, delim = ",") |>
mutate(UNIQUE_ID = UUIDgenerate(n = 90))
?UUIDgenerate
## UUID for DNS namespace
DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
## SHA1 (v5) - default
UUIDfromName(DNS.namespace, "r-project.org")
## UUID for DNS namespace
DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
## SHA1 (v5) - default
UUIDfromName(DNS.namespace, "r-project.org")
## UUID for DNS namespace
DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
## SHA1 (v5) - default
UUIDfromName(DNS.namespace, "r-project.org")
## UUID for DNS namespace
DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
## SHA1 (v5) - default
UUIDfromName(DNS.namespace, "r-project.org")
## UUID for DNS namespace
DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
## SHA1 (v5) - default
UUIDfromName(DNS.namespace, "r-project.org2")
## UUID for DNS namespace
DNS.namespace <- "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
## SHA1 (v5) - default
UUIDfromName("asdfsdf", "r-project.org2")
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_longer_delim(cols = PLANTA, delim = ",") |>
mutate(UNIQUE_IDNAME = UUIDfromName(UNIQUE_ID, TREATMENT))
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_longer_delim(cols = PLANTA, delim = ",") |>
mutate(UNIQUE_IDNAME = UUIDgenerate(n = 90))
croqui_planta <-
croqui_uni$fieldbook |>
mutate(PLANTA = paste0("P", 1:5, collapse = ",")) |>
separate_longer_delim(cols = PLANTA, delim = ",") |>
mutate(UNIQUE_ID = UUIDgenerate(n = 90))
View(croqui_planta)
export(croqui_planta, "caderno_planta.csv")
